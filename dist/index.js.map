{"version":3,"sources":["../src/types.ts","../src/index.ts"],"names":["z"],"mappings":"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","file":"index.js","sourcesContent":["import { z } from \"zod\";\n\n// Content-related schemas and types (extracted from database package)\nexport const ContentStatsSchema = z.object({\n   wordsCount: z\n      .string()\n      .optional()\n      .describe(\"The number of words in the content.\"),\n   readTimeMinutes: z\n      .string()\n      .optional()\n      .describe(\"Estimated reading time in minutes.\"),\n   qualityScore: z\n      .string()\n      .optional()\n      .describe(\"A score representing the quality of the content.\"),\n});\n\nexport const ContentMetaSchema = z.object({\n   title: z.string().optional().describe(\"The title of the content.\"),\n   slug: z\n      .string()\n      .optional()\n      .describe(\"A URL-friendly identifier for the content.\"),\n   tags: z\n      .array(z.string())\n      .optional()\n      .describe(\"Tags associated with the content.\"),\n   topics: z\n      .array(z.string())\n      .optional()\n      .describe(\"Topics covered in the content.\"),\n   sources: z\n      .array(z.string())\n      .optional()\n      .describe(\"Sources referenced for the content.\"),\n});\n\nexport const ContentRequestSchema = z.object({\n   description: z.string().min(1, \"Description is required\"),\n});\n\n// Content status enum values\nexport const ContentStatusValues = [\"draft\", \"approved\", \"generating\"] as const;\n\n// Input schemas for API calls\nexport const ListContentByAgentInputSchema = z.object({\n   status: z\n      .enum(ContentStatusValues, {\n         message:\n            \"Invalid content status. Must be one of: draft, approved, generating.\",\n      })\n      .array(),\n   agentId: z.uuid(\"Invalid Agent ID format.\"),\n   limit: z.number().min(1).max(100).optional().default(10),\n   page: z.number().min(1).optional().default(1),\n});\n\nexport const GetContentByIdInputSchema = z.object({\n   id: z.uuid(\"Invalid Content ID format.\"),\n});\n\nexport const GetContentBySlugInputSchema = z.object({\n   slug: z.string().min(1, \"Slug is required.\"),\n});\n\n// Content select schema and type\nexport const ContentSelectSchema = z.object({\n   id: z.string(),\n   agentId: z.string(),\n   imageUrl: z.string().nullable(),\n   userId: z.string(),\n   body: z.string(),\n   status: z.enum(ContentStatusValues),\n   meta: ContentMetaSchema,\n   request: ContentRequestSchema,\n   stats: ContentStatsSchema,\n   createdAt: z.date(),\n   updatedAt: z.date(),\n});\n\nexport const ContentListResponseSchema = z.object({\n   posts: ContentSelectSchema.pick({\n      id: true,\n      meta: true,\n      imageUrl: true,\n      status: true,\n      createdAt: true,\n      stats: true,\n   }).array(),\n   total: z.number(),\n});\nexport type ContentList = z.infer<typeof ContentListResponseSchema>;\n// Exported types\nexport type ContentStats = z.infer<typeof ContentStatsSchema>;\nexport type ContentMeta = z.infer<typeof ContentMetaSchema>;\nexport type ContentRequest = z.infer<typeof ContentRequestSchema>;\nexport type ContentStatus = (typeof ContentStatusValues)[number];\nexport type ContentSelect = z.infer<typeof ContentSelectSchema>;\n","import SuperJSON from \"superjson\";\nimport { z } from \"zod\";\nimport type { ContentList, ContentSelect } from \"./types\";\nimport {\n   ListContentByAgentInputSchema,\n   GetContentByIdInputSchema,\n   GetContentBySlugInputSchema,\n   ContentSelectSchema,\n   ContentListResponseSchema,\n} from \"./types\";\n\nexport const ERROR_CODES = {\n   MISSING_API_KEY: {\n      code: \"SDK_E001\",\n      message: \"apiKey is required to initialize the ContentaGenSDK\",\n   },\n   API_REQUEST_FAILED: {\n      code: \"SDK_E002\",\n      message: \"API request failed\",\n   },\n   INVALID_API_RESPONSE: {\n      code: \"SDK_E003\",\n      message: \"Invalid API response format.\",\n   },\n   INVALID_INPUT: {\n      code: \"SDK_E004\",\n      message: \"Invalid input.\",\n   },\n};\n\nexport const TRPC_ENDPOINTS = {\n   listContentByAgent: \"listContentByAgent\",\n   getContentById: \"getContentById\",\n   getContentBySlug: \"getContentBySlug\",\n};\n\nconst PRODUCTION_API_URL = \"https://api.contentagen.com\";\n\nexport interface SdkConfig {\n   apiKey: string;\n}\n\nexport class ContentaGenSDK {\n   private trpcUrl: string;\n   private apiKey: string;\n\n   constructor(config: SdkConfig) {\n      if (!config.apiKey) {\n         throw new Error(\"apiKey is required to initialize the ContentaGenSDK\");\n      }\n\n      const baseUrl = PRODUCTION_API_URL;\n\n      this.trpcUrl = `${baseUrl}/trpc`;\n      this.apiKey = config.apiKey;\n   }\n\n   private transformDates(data: unknown): unknown {\n      if (Array.isArray(data)) {\n         return data.map((item) => this.transformDates(item));\n      }\n      if (data && typeof data === \"object\" && data !== null) {\n         const obj: Record<string, unknown> = { ...data };\n         for (const key of Object.keys(obj)) {\n            if (\n               (key === \"createdAt\" || key === \"updatedAt\") &&\n               typeof obj[key] === \"string\"\n            ) {\n               obj[key] = new Date(obj[key] as string);\n            } else if (\n               Array.isArray(obj[key]) ||\n               (obj[key] && typeof obj[key] === \"object\")\n            ) {\n               obj[key] = this.transformDates(obj[key]);\n            }\n         }\n         return obj;\n      }\n      return data;\n   }\n\n   private _parseTrpcResponse<T>(json: unknown, schema: z.ZodType<T>): T {\n      if (\n         json &&\n         typeof json === \"object\" &&\n         \"result\" in json &&\n         (json as { result: unknown }).result &&\n         typeof (json as { result: unknown }).result === \"object\" &&\n         \"data\" in (json as { result: { data: unknown } }).result\n      ) {\n         const resultObj = (json as { result: { data: unknown } }).result;\n         const responseData = resultObj.data;\n         // Safely extract json property if exists, or use responseData\n         const actualData =\n            typeof responseData === \"object\" &&\n            responseData !== null &&\n            \"json\" in responseData\n               ? (responseData as { json: unknown }).json\n               : responseData;\n         const transformedData = this.transformDates(actualData);\n         return schema.parse(transformedData);\n      }\n      const { code, message } = ERROR_CODES.INVALID_API_RESPONSE;\n      throw new Error(`${code}: ${message}`);\n   }\n\n   private async _query<T>(\n      path: string,\n      input: unknown,\n      schema: z.ZodType<T>,\n   ): Promise<T> {\n      const url = new URL(`${this.trpcUrl}/sdk.${path}`);\n      if (input) {\n         url.searchParams.set(\"input\", SuperJSON.stringify(input));\n      }\n\n      const response = await fetch(url.toString(), {\n         headers: { \"sdk-api-key\": this.apiKey },\n      });\n\n      if (!response.ok) {\n         const { code, message } = ERROR_CODES.API_REQUEST_FAILED;\n         throw new Error(`${code}: ${message} (${response.statusText})`);\n      }\n\n      const json = await response.json();\n      return this._parseTrpcResponse(json, schema);\n   }\n   async listContentByAgent(\n      params: z.input<typeof ListContentByAgentInputSchema>,\n   ): Promise<ContentList> {\n      try {\n         const validatedParams = ListContentByAgentInputSchema.parse(params);\n         return this._query(\n            TRPC_ENDPOINTS.listContentByAgent,\n            validatedParams,\n            ContentListResponseSchema,\n         );\n      } catch (error) {\n         if (error instanceof z.ZodError) {\n            const { code, message } = ERROR_CODES.INVALID_INPUT;\n            throw new Error(\n               `${code}: ${message} for listContentByAgent: ${error.issues.map((e) => e.message).join(\", \")}`,\n            );\n         }\n         throw error;\n      }\n   }\n\n   async getContentById(\n      params: z.input<typeof GetContentByIdInputSchema>,\n   ): Promise<ContentSelect> {\n      try {\n         const validatedParams = GetContentByIdInputSchema.parse(params);\n         return this._query(\n            TRPC_ENDPOINTS.getContentById,\n            validatedParams,\n            ContentSelectSchema,\n         );\n      } catch (error) {\n         if (error instanceof z.ZodError) {\n            const { code, message } = ERROR_CODES.INVALID_INPUT;\n            throw new Error(\n               `${code}: ${message} for getContentById: ${error.issues.map((e) => e.message).join(\", \")}`,\n            );\n         }\n         throw error;\n      }\n   }\n\n   async getContentBySlug(\n      params: z.input<typeof GetContentBySlugInputSchema>,\n   ): Promise<ContentSelect> {\n      try {\n         const validatedParams = GetContentBySlugInputSchema.parse(params);\n         return this._query(\n            TRPC_ENDPOINTS.getContentBySlug,\n            validatedParams,\n            ContentSelectSchema,\n         );\n      } catch (error) {\n         if (error instanceof z.ZodError) {\n            const { code, message } = ERROR_CODES.INVALID_INPUT;\n            throw new Error(\n               `${code}: ${message} for getContentBySlug: ${error.issues.map((e) => e.message).join(\", \")}`,\n            );\n         }\n         throw error;\n      }\n   }\n}\n\nexport const createSdk = (config: SdkConfig): ContentaGenSDK => {\n   return new ContentaGenSDK(config);\n};\nexport {\n   GetContentByIdInputSchema,\n   ListContentByAgentInputSchema,\n   GetContentBySlugInputSchema,\n   ContentSelectSchema,\n   ContentListResponseSchema,\n} from \"./types\";\n"]}